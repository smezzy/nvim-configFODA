* Plugins to install
    https://github.com/ms-jpq/chadtree/tree/chad 
    https://github.com/folke/trouble.nvim
    https://github.com/xiyaowong/transparent.nvim
    https://github.com/ms-jpq/coq_nvim/tree/coq/docs
    add a cool wiki page with the content below with the org plugin

K: Displays hover information about the symbol under the cursor in a floating window. See :help vim.lsp.buf.hover().

gd: Jumps to the definition of the symbol under the cursor. See :help vim.lsp.buf.definition().

gD: Jumps to the declaration of the symbol under the cursor. Some servers don't implement this feature. See :help vim.lsp.buf.declaration().

gi: Lists all the implementations for the symbol under the cursor in the quickfix window. See :help vim.lsp.buf.implementation().

go: Jumps to the definition of the type of the symbol under the cursor. See :help vim.lsp.buf.type_definition().

gr: Lists all the references to the symbol under the cursor in the quickfix window. See :help vim.lsp.buf.references().

gs: Displays signature information about the symbol under the cursor in a floating window. See :help vim.lsp.buf.signature_help(). If a mapping already exists for this key this function is not bound.

<F2>: Renames all references to the symbol under the cursor. See :help vim.lsp.buf.rename().

<F3>: Format code in current buffer. See :help vim.lsp.buf.format().

<F4>: Selects a code action available at the current cursor position. See :help vim.lsp.buf.code_action().

gl: Show diagnostics in a floating window. See :help vim.diagnostic.open_float().

[d: Move to the previous diagnostic in the current buffer. See :help vim.diagnostic.goto_prev().

]d: Move to the next diagnostic. See :help vim.diagnostic.goto_next().


----------------------
You might not need lsp-zero
Really. Out of all the features this plugin offers there is a good chance the only thing you want is the automatic setup of LSP servers. Let me tell you how to configure that.

You'll need these plugins:

mason.nvim
mason-lspconfig
nvim-lspconfig
cmp-nvim-lsp (optional)
After you have installed all that you configure them in this order.

vim.api.nvim_create_autocmd('LspAttach', {
  desc = 'LSP actions',
  callback = function(event)
    -- Create your keybindings here...
  end
})

require('mason').setup()
require('mason-lspconfig').setup({
  ensure_installed = {
    -- Replace these with whatever servers you want to install
    'rust_analyzer',
    'tsserver',
  }
})

local lspconfig = require('lspconfig')
local lsp_capabilities = require('cmp_nvim_lsp').default_capabilities()

require('mason-lspconfig').setup_handlers({
  function(server_name)
    lspconfig[server_name].setup({
      capabilities = lsp_capabilities,
    })
  end,
})
In this example I have automatic install of servers using the option ensure_installed in mason-lspconfig. You can delete that list of servers and add your own.

If you notice your LSP servers don't behave correctly, it might be because .setup_handlers. You can replace that function with a for loop.

local lspconfig = require('lspconfig')
local get_servers = require('mason-lspconfig').get_installed_servers

for _, server_name in ipairs(get_servers()) do
  lspconfig[server_name].setup({
    capabilities = lsp_capabilities,
  })
end

